version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: forex_postgres_${NODE_ENV:-local}
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-forex_prediction_local}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - forex_network

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: forex_redis_${NODE_ENV:-local}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - forex_network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: forex_backend_${NODE_ENV:-local}
    env_file:
      - .env.${NODE_ENV:-local}
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-forex_prediction_local}
      - REDIS_URL=redis://redis:6379/0
    ports:
      - "${API_PORT:-8173}:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/models:/app/models
    restart: unless-stopped
    networks:
      - forex_network

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NODE_ENV: ${NODE_ENV:-local}
    container_name: forex_frontend_${NODE_ENV:-local}
    environment:
      - VITE_API_URL=http://localhost:${API_PORT:-8173}
    ports:
      - "${FRONTEND_PORT:-3173}:80"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - forex_network

volumes:
  postgres_data:
  redis_data:

networks:
  forex_network:
    driver: bridge