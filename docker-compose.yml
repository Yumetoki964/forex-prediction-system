version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: forex_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-forex_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-forex_pass}
      POSTGRES_DB: ${POSTGRES_DB:-forex_prediction_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - forex_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U forex_user -d forex_prediction_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: forex_redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - forex_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: forex_backend
    restart: unless-stopped
    env_file:
      - ./backend/.env.production
    environment:
      DATABASE_URL: postgresql://forex_user:forex_pass@db:5432/forex_prediction_db
      REDIS_URL: redis://redis:6379/0
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - forex_network
    command: >
      sh -c "
        alembic upgrade head &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers 4
      "

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: http://backend:8000
    container_name: forex_frontend
    restart: unless-stopped
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - forex_network

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: forex_nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - nginx_logs:/var/log/nginx
    ports:
      - "443:443"
      - "8080:80"
    depends_on:
      - backend
      - frontend
    networks:
      - forex_network

  # pgAdmin (Database Management - Optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: forex_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@forex.com
      PGADMIN_DEFAULT_PASSWORD: admin_password
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - forex_network
    profiles:
      - dev

  # Prometheus (Monitoring - Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: forex_prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    networks:
      - forex_network
    profiles:
      - monitoring

  # Grafana (Visualization - Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: forex_grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin_password
      GF_INSTALL_PLUGINS: 
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    networks:
      - forex_network
    profiles:
      - monitoring

networks:
  forex_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  backend_logs:
  nginx_logs:
  pgadmin_data:
  prometheus_data:
  grafana_data: