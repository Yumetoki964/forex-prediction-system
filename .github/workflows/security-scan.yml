name: Security Scan

on:
  schedule:
    # Run every Monday at 2:00 AM UTC
    - cron: '0 2 * * 1'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to run'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - dependencies
          - container
          - code

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'dependencies' || github.event.inputs.scan_type == ''

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Python dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install safety bandit semgrep

      - name: Install Node.js dependencies
        run: |
          cd frontend
          npm ci

      - name: Run Python safety check
        run: |
          cd backend
          safety check --json --output safety-report.json || true
          safety check

      - name: Run npm audit
        run: |
          cd frontend
          npm audit --audit-level moderate --json > npm-audit-report.json || true
          npm audit --audit-level moderate

      - name: Run Snyk security scan
        if: false # Enable if Snyk token is available
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=frontend/package.json

      - name: Upload dependency scan results
        uses: actions/upload-artifact@v3
        with:
          name: dependency-scan-results
          path: |
            backend/safety-report.json
            frontend/npm-audit-report.json

  # Container image scanning
  container-scan:
    name: Container Image Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'container' || github.event.inputs.scan_type == ''

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend image for scanning
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          load: true
          tags: forex-backend:scan
          cache-from: type=gha

      - name: Build frontend image for scanning
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          load: true
          tags: forex-frontend:scan
          cache-from: type=gha

      - name: Run Trivy vulnerability scanner on backend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'forex-backend:scan'
          format: 'sarif'
          output: 'trivy-backend-results.sarif'

      - name: Run Trivy vulnerability scanner on frontend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'forex-frontend:scan'
          format: 'sarif'
          output: 'trivy-frontend-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: '.'

      - name: Upload container scan artifacts
        uses: actions/upload-artifact@v3
        with:
          name: container-scan-results
          path: |
            trivy-backend-results.sarif
            trivy-frontend-results.sarif

  # Code security scanning
  code-scan:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'code' || github.event.inputs.scan_type == ''

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, python

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python dependencies for analysis
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run Bandit security linter for Python
        run: |
          cd backend
          pip install bandit[toml]
          bandit -r app/ -f json -o bandit-report.json || true
          bandit -r app/

      - name: Run Semgrep security analysis
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
          generateSarif: "1"

      - name: Upload code scan results
        uses: actions/upload-artifact@v3
        with:
          name: code-scan-results
          path: |
            backend/bandit-report.json
            semgrep.sarif

  # Secrets scanning
  secrets-scan:
    name: Secrets and Sensitive Data Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == ''

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }} # Get from https://gitleaks.io/

  # Network security testing
  network-scan:
    name: Network Security Test
    runs-on: ubuntu-latest
    if: (github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == '') && false # Enable for production deployments

    steps:
      - name: Run OWASP ZAP security scan
        uses: zaproxy/action-full-scan@v0.4.0
        with:
          target: ${{ vars.STAGING_URL || 'https://staging.example.com' }}
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: Upload OWASP ZAP results
        uses: actions/upload-artifact@v3
        with:
          name: zap-scan-results
          path: report_html.html

  # Compliance and policy checks
  compliance-check:
    name: Compliance and Policy Check
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == ''

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Open Policy Agent (OPA) checks
        if: false # Enable if OPA policies are defined
        uses: open-policy-agent/setup-opa@v2
        with:
          version: latest

      - name: Validate Dockerfile security best practices
        run: |
          # Check Dockerfile security best practices
          echo "ЁЯФН Checking Dockerfile security..."
          
          # Check for non-root user
          if ! grep -q "USER" backend/Dockerfile; then
            echo "тЪая╕П Warning: Backend Dockerfile should specify a non-root USER"
          fi
          
          if ! grep -q "USER" frontend/Dockerfile; then
            echo "тЪая╕П Warning: Frontend Dockerfile should specify a non-root USER"
          fi
          
          # Check for latest tag usage
          if grep -q ":latest" backend/Dockerfile frontend/Dockerfile; then
            echo "тЪая╕П Warning: Avoid using :latest tags in production Dockerfiles"
          fi

      - name: Check environment variable security
        run: |
          echo "ЁЯФН Checking environment variable security..."
          
          # Look for potential secrets in env files (should be templates only)
          if find . -name "*.env*" -not -path "./node_modules/*" -not -path "./.git/*" | xargs grep -l "password\|secret\|key" | grep -v ".example"; then
            echo "тЪая╕П Warning: Potential secrets found in committed env files"
          fi

  # Generate security report
  generate-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, container-scan, code-scan, secrets-scan, compliance-check]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all scan results
        uses: actions/download-artifact@v3

      - name: Generate security summary report
        run: |
          echo "# ЁЯФТ Security Scan Summary Report" > security-report.md
          echo "Generated: $(date)" >> security-report.md
          echo "" >> security-report.md
          
          echo "## Scan Results" >> security-report.md
          echo "- **Dependency Scan**: ${{ needs.dependency-scan.result }}" >> security-report.md
          echo "- **Container Scan**: ${{ needs.container-scan.result }}" >> security-report.md
          echo "- **Code Scan**: ${{ needs.code-scan.result }}" >> security-report.md
          echo "- **Secrets Scan**: ${{ needs.secrets-scan.result }}" >> security-report.md
          echo "- **Compliance Check**: ${{ needs.compliance-check.result }}" >> security-report.md
          echo "" >> security-report.md
          
          echo "## Recommendations" >> security-report.md
          echo "1. Review all HIGH and CRITICAL vulnerabilities" >> security-report.md
          echo "2. Update dependencies with known security issues" >> security-report.md
          echo "3. Address any secrets or sensitive data findings" >> security-report.md
          echo "4. Ensure container images follow security best practices" >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-summary-report
          path: security-report.md

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ЁЯФТ Security Scan Results\n\n${report}`
            });

  # Notify security team
  notify:
    name: Security Notifications
    runs-on: ubuntu-latest
    needs: [dependency-scan, container-scan, code-scan, secrets-scan]
    if: always() && (needs.dependency-scan.result == 'failure' || needs.container-scan.result == 'failure' || needs.code-scan.result == 'failure' || needs.secrets-scan.result == 'failure')

    steps:
      - name: Notify security team
        run: |
          echo "ЁЯЪи Security vulnerabilities detected!"
          echo "Please review the scan results and take appropriate action."
          
          # Send notification (customize based on your notification system)
          if [ "${{ secrets.SECURITY_WEBHOOK }}" ]; then
            curl -X POST "${{ secrets.SECURITY_WEBHOOK }}" \
              -H "Content-Type: application/json" \
              -d '{"text":"ЁЯЪи Security vulnerabilities detected in forex-prediction-system","channel":"#security"}'
          fi