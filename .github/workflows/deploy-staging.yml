name: Deploy to Staging

on:
  push:
    branches: [develop]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if CI fails'
        required: false
        default: 'false'
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend

jobs:
  # Build and Push Docker Images
  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    if: github.event.inputs.force_deploy == 'true' || github.ref == 'refs/heads/develop'
    outputs:
      backend-tag: ${{ steps.meta-backend.outputs.tags }}
      frontend-tag: ${{ steps.meta-frontend.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=staging-latest

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract metadata for frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=staging-latest

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VITE_API_URL=${{ secrets.STAGING_API_URL }}

  # Deploy to Railway (Staging)
  deploy-railway:
    name: Deploy to Railway (Staging)
    runs-on: ubuntu-latest
    needs: build-and-push
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Railway CLI
        run: npm install -g @railway/cli

      - name: Deploy to Railway
        id: deploy
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          railway login --token $RAILWAY_TOKEN
          railway up --service backend --environment staging
          railway up --service frontend --environment staging
          STAGING_URL=$(railway status --service frontend --environment staging --json | jq -r '.deployments[0].url')
          echo "url=$STAGING_URL" >> $GITHUB_OUTPUT

      - name: Run health check
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 30
          curl -f ${{ steps.deploy.outputs.url }}/health || exit 1

  # Deploy to Render (Alternative)
  deploy-render:
    name: Deploy to Render (Alternative)
    runs-on: ubuntu-latest
    needs: build-and-push
    if: false # Enable if using Render instead of Railway
    environment:
      name: staging-render
      url: ${{ vars.RENDER_STAGING_URL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Render
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_SERVICE_ID_STAGING }}
          api-key: ${{ secrets.RENDER_API_KEY }}
          wait-for-success: true

  # Run Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [deploy-railway]
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run API integration tests
        env:
          BASE_URL: ${{ needs.deploy-railway.outputs.url }}
          API_KEY: ${{ secrets.STAGING_API_KEY }}
        run: |
          cd backend
          pytest tests/integration/ -v --tb=short

      - name: Run E2E tests (if available)
        if: false # Enable when E2E tests are implemented
        env:
          BASE_URL: ${{ needs.deploy-railway.outputs.url }}
        run: |
          cd frontend
          npx playwright test

  # Notify deployment status
  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-railway, integration-tests]
    if: always()

    steps:
      - name: Notify success
        if: needs.deploy-railway.result == 'success' && needs.integration-tests.result == 'success'
        run: |
          echo "‚úÖ Staging deployment successful!"
          echo "üîó URL: ${{ needs.deploy-railway.outputs.url }}"

      - name: Notify failure
        if: needs.deploy-railway.result == 'failure' || needs.integration-tests.result == 'failure'
        run: |
          echo "‚ùå Staging deployment failed!"
          echo "Deploy Status: ${{ needs.deploy-railway.result }}"
          echo "Tests Status: ${{ needs.integration-tests.result }}"
          exit 1

      - name: Slack notification (if configured)
        if: false # Enable if Slack webhook is configured
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Staging Deployment: ${{ job.status }}
            URL: ${{ needs.deploy-railway.outputs.url }}
            Commit: ${{ github.sha }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}