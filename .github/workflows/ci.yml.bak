name: Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  # Backend Testing and Quality Checks
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: forex_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Run Python linting (flake8)
        run: |
          cd backend
          flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run Python type checking (mypy)
        run: |
          cd backend
          mypy app/ --ignore-missing-imports

      - name: Run Python code formatting check (black)
        run: |
          cd backend
          black --check --diff app/

      - name: Set up test database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/forex_test
        run: |
          cd backend
          python test_db_setup.py

      - name: Run backend tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/forex_test
        run: |
          cd backend
          pytest --cov=app --cov-report=xml --cov-report=term-missing

      - name: Upload backend coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

  # Frontend Testing and Quality Checks
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run ESLint
        run: |
          cd frontend
          npm run lint

      - name: Run TypeScript type checking
        run: |
          cd frontend
          npm run type-check

      - name: Run Prettier format check
        run: |
          cd frontend
          npx prettier --check "src/**/*.{ts,tsx,css}"

      - name: Build frontend (development)
        run: |
          cd frontend
          npm run build

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner (filesystem)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run backend dependency security audit
        run: |
          cd backend
          pip install safety
          safety check

      - name: Run frontend dependency security audit
        run: |
          cd frontend
          npm audit --audit-level moderate

  # Docker Build Test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: false
          tags: forex-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: false
          tags: forex-frontend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Overall CI Status Check
  ci-status:
    name: CI Status Check
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security, docker-build]
    if: always()

    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ needs.backend-test.result }}" == "success" && 
                "${{ needs.frontend-test.result }}" == "success" && 
                "${{ needs.security.result }}" == "success" && 
                "${{ needs.docker-build.result }}" == "success" ]]; then
            echo "✅ All CI checks passed successfully!"
            exit 0
          else
            echo "❌ Some CI checks failed:"
            echo "Backend Test: ${{ needs.backend-test.result }}"
            echo "Frontend Test: ${{ needs.frontend-test.result }}"
            echo "Security Scan: ${{ needs.security.result }}"
            echo "Docker Build: ${{ needs.docker-build.result }}"
            exit 1
          fi